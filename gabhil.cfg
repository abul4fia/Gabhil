{
# Configure parameters to access to the email server
# and to filter out the annotations created by Apple Books
#
# the variable "subject" contains a string which is matched
# against the subjects in all messages in the inbox folder
"email": {
    # Imap server (leave it as is, if you use Gmail)
    "server": "imap.gmail.com",

    # Your email address
    "login": "YOUR_EMAIL@gmail.com",

    # The application password
    "passwd": "APPLICATION_PASSWORD",

    # The string that Apple Books puts in the subject of the email
    # (it can be localized to your language)
    "subject": "Notes from"
},

# Configure options which modify how the output is generated
"options": {
    # Set to false if you don't want the initial block with metadata
    "include_metadata": true,

    # Set to true if you don't want the file to be overwritten, but
    # want to append to it instead (not very useful, except during
    # testing, to avoid loss of data)
    "append_file": false,

    # If true, at the end of each note the capter to which it belongs
    # will appear in parenthesis
    "include_chapter_in_notes": false,

    # If true, at the end of each note it will be added the date at which
    # the note was taken. The format of the date is the one Apple Books
    # generates, and it does not match with logseq date formats
    "include_date_in_notes": false,

    # group_by contains a list of strings or a single string. These strings
    # can be one of the following: "date", "chapter", "color", "none"
    #
    # All notes are grouped by the parameter specified. For example, if you
    # put "color", then the generated markdown will have an entry for each
    # color (yellow, blue, etc.) and inside each entry all the notes with
    # that color will appear.
    #
    # If you specify several strings in a list, the grouping if performed
    # as requested in several sub-levels. For example ["chapter", "date", "color"]
    # will create a top-level entry for each chapter, and inside each one
    # it will create a second-level entry for each date, and inside each one
    # it will create a third-level entry for each color, and inside each one
    # it will create a fourth-level entry for each highlight
    #
    # If one of the elements of the list is "none", then the remaining of
    # the list is ignored, and all notes are dumped in the previously selected
    # level. In particular, if the first entry in the list is "none", no
    # grouping is performed, and each highlight will be a first-level entry
    "group_by": ["chapter"],

    # color_map inserts any text in front of each note, acording to its color
    # The format of the note will be - {inserted_text} {note text}
    #
    # For example, you can insert arbitray emoji icons, but you can also
    # insert personal tags, or heading markers such as "#" or "##"
    #
    # Text notes nested inside highlights will use as inserted_text the one
    # specified in the key "note"
    "color_map": {
        "yellow": "",
        "blue": "üü¶",
        "green": "üü©",
        "pink": "üü•",
        "purple": "#",
        "defaultColor": "üìå",
        "note": "üìù"
        },

    # If as a result of the color_map a note is prefixed with a heading
    # (i.e: one of "#", "##", "###", or "####") it can be useful to remove
    # any newlines in the text of that highlight
    "join_titles": true,

    # For debugging, you can prefer to dump the result in the standard
    # output instead of a file
    # This can be useful also to redirect to a filename different than
    # the one automatically generated by the script (which is composed
    # by the title of the book and its author)
    "dump_stdout": false
}
}
